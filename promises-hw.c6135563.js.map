{"mappings":"AEAA,MAAM,EAAQ,AAAA,GACH,IAAI,QAAQ,CAAC,EAAS,KACzB,IAAM,EAAW,YAEjB,aAEQ,GAAS,EAAK,MACd,cAAc,GACd,EAAQ,GAEhB,EARyC,GACrC,EAAQ,CAQhB,GAGI,EAAS,AAAA,GAAQ,QAAQ,GAAG,CAAC,CAAC,eAAe,EAAE,EAAK,EAAE,CAAC,EAE7D,EAAM,KAAM,IAAI,CAAC,GACjB,EAAM,KAAM,IAAI,CAAC,GACjB,EAAM,MAAM,IAAI,CAAC,GClBnB,MAAM,EAAQ,CACZ,CAAE,KAAM,QAAS,OAAQ,CAAA,CAAK,EAC9B,CAAE,KAAM,OAAQ,OAAQ,CAAA,CAAM,EAC9B,CAAE,KAAM,OAAQ,OAAQ,CAAA,CAAK,EAC7B,CAAE,KAAM,MAAO,OAAQ,CAAA,CAAM,EAC9B,CAEK,EAAkB,CAAC,EAAU,KACjC,IAAM,EAAe,EAAS,GAAG,CAAC,AAAC,GACjC,EAAK,IAAI,GAAK,EAAW,CAAE,GAAG,CAAI,CAAE,OAAQ,CAAC,EAAK,MAAM,AAAC,EAAI,GAG/D,OAAO,IAAI,QAAQ,CAAC,EAAS,KAC3B,EAAQ,EACV,EACF,EAEM,EAAS,AAAC,GAAiB,QAAQ,KAAK,CAAC,GAC/C,EAAgB,EAAO,SAAS,IAAI,CAAC,GACrC,EAAgB,EAAO,OAAO,IAAI,CAAC,GCnBnC,MAAM,EAA4B,CAAC,EAAK,IAC/B,KAAK,KAAK,CAAC,KAAK,MAAM,GAAM,CAAA,EAAM,EAAM,CAAA,EAAK,GAGhD,EAAkB,AAAC,IACvB,IAAM,EAAQ,EAA0B,IAAK,KAE7C,OAAO,IAAI,QAAQ,CAAC,EAAS,KAC3B,WAAW,KACY,KAAK,MAAM,GAAK,GAE/B,EAAQ,CAAC,GAAI,EAAY,EAAE,CAAE,KAAM,CAAK,GAExC,EAAO,EAAY,EAAE,CAE3B,EAAG,EACP,EAEF,EAEM,EAAa,CAAC,CAAA,GAAC,CAAE,CAAA,KAAE,CAAI,CAAC,IAC5B,QAAQ,GAAG,CAAC,CAAC,YAAY,EAAE,EAAG,cAAc,EAAE,EAAK,EAAE,CAAC,CACxD,EAEM,EAAW,AAAC,IAChB,QAAQ,IAAI,CAAC,CAAC,6BAA6B,EAAE,EAAG,yBAAyB,CAAC,CAC5E,EAEA,EAAgB,CAAE,GAAI,GAAI,OAAQ,GAAI,GAAG,IAAI,CAAC,GAAY,KAAK,CAAC,GAEhE,EAAgB,CAAE,GAAI,GAAI,OAAQ,GAAI,GAAG,IAAI,CAAC,GAAY,KAAK,CAAC,GAEhE,EAAgB,CAAE,GAAI,GAAI,OAAQ,EAAG,GAAG,IAAI,CAAC,GAAY,KAAK,CAAC,GAE/D,EAAgB,CAAE,GAAI,GAAI,OAAQ,GAAI,GAAG,IAAI,CAAC,GAAY,KAAK,CAAC","sources":["<anon>","src/main.js","src/js/delay.js","src/js/toggle-state.js","src/js/make-transaction.js"],"sourcesContent":["const $8125507d85d59a45$var$delay = (ms)=>{\n    return new Promise((resolve, reject)=>{\n        const interval = setInterval(timerCount, ms);\n        let count = 0;\n        function timerCount() {\n            count++;\n            if (count >= ms / 1000) {\n                clearInterval(interval);\n                resolve(ms);\n            }\n        }\n    });\n};\nconst $8125507d85d59a45$var$logger = (time)=>console.log(`Resolved after ${time}ms`);\n$8125507d85d59a45$var$delay(2000).then($8125507d85d59a45$var$logger); // Resolved after 2000ms\n$8125507d85d59a45$var$delay(1000).then($8125507d85d59a45$var$logger); // Resolved after 1000ms\n$8125507d85d59a45$var$delay(1500).then($8125507d85d59a45$var$logger); // Resolved after 1500ms    \n\n\nconst $cbaf094ff4c363d4$var$users = [\n    {\n        name: \"Mango\",\n        active: true\n    },\n    {\n        name: \"Poly\",\n        active: false\n    },\n    {\n        name: \"Ajax\",\n        active: true\n    },\n    {\n        name: \"Lux\",\n        active: false\n    }\n];\nconst $cbaf094ff4c363d4$var$toggleUserState = (allUsers, userName)=>{\n    const updatedUsers = allUsers.map((user)=>user.name === userName ? {\n            ...user,\n            active: !user.active\n        } : user);\n    return new Promise((resolve, reject)=>{\n        resolve(updatedUsers);\n    });\n};\nconst $cbaf094ff4c363d4$var$logger = (updatedUsers)=>console.table(updatedUsers);\n$cbaf094ff4c363d4$var$toggleUserState($cbaf094ff4c363d4$var$users, \"Mango\").then($cbaf094ff4c363d4$var$logger);\n$cbaf094ff4c363d4$var$toggleUserState($cbaf094ff4c363d4$var$users, \"Lux\").then($cbaf094ff4c363d4$var$logger);\n\n\nconst $7adcb1822dba4170$var$randomIntegerFromInterval = (min, max)=>{\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};\nconst $7adcb1822dba4170$var$makeTransaction = (transaction)=>{\n    const delay = $7adcb1822dba4170$var$randomIntegerFromInterval(200, 500);\n    return new Promise((resolve, reject)=>{\n        setTimeout(()=>{\n            const canProcess = Math.random() > 0.3;\n            if (canProcess) resolve({\n                id: transaction.id,\n                time: delay\n            });\n            else reject(transaction.id);\n        }, delay);\n    });\n};\nconst $7adcb1822dba4170$var$logSuccess = ({ id: id, time: time })=>{\n    console.log(`Transaction ${id} processed in ${time}ms`);\n};\nconst $7adcb1822dba4170$var$logError = (id)=>{\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n$7adcb1822dba4170$var$makeTransaction({\n    id: 70,\n    amount: 150\n}).then($7adcb1822dba4170$var$logSuccess).catch($7adcb1822dba4170$var$logError);\n$7adcb1822dba4170$var$makeTransaction({\n    id: 71,\n    amount: 230\n}).then($7adcb1822dba4170$var$logSuccess).catch($7adcb1822dba4170$var$logError);\n$7adcb1822dba4170$var$makeTransaction({\n    id: 72,\n    amount: 75\n}).then($7adcb1822dba4170$var$logSuccess).catch($7adcb1822dba4170$var$logError);\n$7adcb1822dba4170$var$makeTransaction({\n    id: 73,\n    amount: 100\n}).then($7adcb1822dba4170$var$logSuccess).catch($7adcb1822dba4170$var$logError);\n\n\n\n\n//# sourceMappingURL=promises-hw.c6135563.js.map\n","import \"./js/delay\";\r\nimport \"./js/toggle-state\";\r\nimport \"./js/make-transaction\"","const delay = ms => {\r\n    return new Promise((resolve, reject) => {\r\n        const interval = setInterval(timerCount, ms);\r\n        let count = 0;\r\n        function timerCount() {\r\n            count++\r\n            if (count >= ms / 1000) {\r\n                clearInterval(interval);\r\n                resolve(ms);\r\n            }\r\n        }\r\n    })\r\n  };\r\n\r\n  const logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n  delay(2000).then(logger); // Resolved after 2000ms\r\n  delay(1000).then(logger); // Resolved after 1000ms\r\n  delay(1500).then(logger); // Resolved after 1500ms    ","const users = [\r\n  { name: \"Mango\", active: true },\r\n  { name: \"Poly\", active: false },\r\n  { name: \"Ajax\", active: true },\r\n  { name: \"Lux\", active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  const updatedUsers = allUsers.map((user) =>\r\n    user.name === userName ? { ...user, active: !user.active } : user\r\n  );\r\n\r\n  return new Promise((resolve, reject) => {\r\n    resolve(updatedUsers)\r\n  });\r\n};\r\n\r\nconst logger = (updatedUsers) => console.table(updatedUsers);   \r\ntoggleUserState(users, \"Mango\").then(logger);\r\ntoggleUserState(users, \"Lux\").then(logger);\r\n","const randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = (transaction) => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n        const canProcess = Math.random() > 0.3;\r\n        if (canProcess) {\r\n            resolve({id: transaction.id, time: delay});\r\n          } else {\r\n            reject(transaction.id);\r\n          }\r\n      }, delay);\r\n  });\r\n  \r\n};\r\n\r\nconst logSuccess = ({id, time}) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = (id) => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\r\n"],"names":["$8125507d85d59a45$var$delay","ms","Promise","resolve","reject","interval","setInterval","count","clearInterval","$8125507d85d59a45$var$logger","time","console","log","then","$cbaf094ff4c363d4$var$users","name","active","$cbaf094ff4c363d4$var$toggleUserState","allUsers","userName","updatedUsers","map","user","$cbaf094ff4c363d4$var$logger","table","$7adcb1822dba4170$var$randomIntegerFromInterval","min","max","Math","floor","random","$7adcb1822dba4170$var$makeTransaction","transaction","delay","setTimeout","id","$7adcb1822dba4170$var$logSuccess","$7adcb1822dba4170$var$logError","warn","amount","catch"],"version":3,"file":"promises-hw.c6135563.js.map"}